model RBAC

-- Checkpoint 2: Classes, Associations, Constraints (Per Ray et al.)

-- CLASSES

class User
attributes
  userID : String
operations
  CreateSession(s : Session)
  DeleteSession(s : Session)
  AssignRole(r : Role)
  DeassignRole(r: Role)
  AssignedRoles() : Set(Role) = self.roles
  AuthorizedRoles() : Set(Role) =
    self.roles->union(self.roles->collect(ro | ro.Descendants()))->asSet()
end

class Role
attributes
  name : String
  maxUsers : Integer
operations
  GrantPermission(p : Permission)
  RevokePermission(p : Permission)
  CheckAccess(obj : Object, op : Operation) : Boolean =
    self.permissions->exists(p | p.objects->includes(obj) and p.ops->includes(op))
  AddAscendant(r : Role)
  DeleteAscendant(r : Role)
  AddDescendant(r : Role)
  DeleteDescendant(r : Role)
  AddSSDRole(r : Role)
  DeleteSSDRole(r : Role)
  AddDSDRole(r : Role)
  DeleteDSDRole(r : Role)
  AssignedUsers() : Set(User) = self.users
  AuthorizedUsers() : Set(User) = 
    self.users->union(self.Ascendants().users)->asSet()
  Ascendants()  : Set(Role) =
    self.senior->union(self.senior->collect(r | r.Ascendants()))->asSet()
  Descendants() : Set(Role) =
    self.junior->union(self.junior->collect(r | r.Descendants()))->asSet()
  SSDRoles() : Set(Role) = 
    if self.ssdConstraint->isEmpty
      then oclEmpty(Set(Role))
    else self.ssdConstraint.roles->asSet()
    endif
  DSDRoles() : Set(Role) =
    if self.dsdConstraint->isEmpty
      then oclEmpty(Set(Role))
    else self.dsdConstraint.roles->asSet()
    endif
end

class Session
attributes
  sessionID : String
operations
  AddActiveRole(r : Role)
  DropActiveRole(r : Role)
  CheckAccess(obj : Object, op : Operation) : Boolean = 
    self.activeRoles->collect(ro | ro.permissions)->asSet()->exists(p |
      p.objects->includes(obj) and p.ops->includes(op))
  InvokeOperation(obj : Object, op : Operation)
end

class Permission
attributes
  name : String
operations
  CheckAccess(obj : Object, op : Operation) : Boolean =
    self.objects->includes(obj) and self.ops->includes(op)
end

class Object
attributes
  name : String
end

class Operation
attributes
  name : String
end

-- CONSTRAINT HELPER CLASSES

class SSDRole
attributes name : String end
class DSD
attributes name : String end
class PrerequisiteRole
attributes name : String end
class SSDPerm
attributes name : String end
class SSDUser
attributes name : String end
class PrerequisitePerm
attributes name : String end


-- ASSOCIATIONS

association UserAssignment between
  User[0..*] role users
  Role[0..*] role roles
end

association UserSessions between
  User[1] role user
  Session[0..*] role sessions
end

association SessionRoles between
  Session[0..*] role sessions
  Role[0..*] role activeRoles
end

association RoleHierarchy between
  Role[0..*] role senior
  Role[0..*] role junior
end

association PermAssignment between
  Role[0..*] role roles
  Permission[0..*] role permissions
end

association PermObjects between
  Permission[0..*] role permissions
  Object[1..*] role objects
end

association PermOperations between
  Permission[0..*] role permissions
  Operation[1..*] role ops
end

association SSDConstraint between
  SSDRole[1] role ssdConstraint
  Role[2] role roles
end

association DSDConstraint between
  DSD[1] role dsdConstraint
  Role[2] role roles
end

association PrereqRoles between
  PrerequisiteRole[1] role prereqConstraint
  Role[2] role roles
end

association SSDPermConstraint between
  SSDPerm[1] role ssdPermConstraint
  Permission[2] role perms
end

association SSDUserConstraint between
  SSDUser[1] role ssdUserConstraint
  User[2] role users
end

association PrereqPerms between
  PrerequisitePerm[1] role prereqPermConstraint
  Permission[2] role perms
end


-- CONSTRAINTS

constraints

context User::CreateSession(s : Session)
post:
  s.oclIsNew() and
  self.sessions->includes(s)

context Role::GrantPermission(p : Permission)
pre:
  not self.permissions->includes(p)
post:
  self.permissions = self.permissions@pre->including(p)

context SSDRole
inv NoConflictingUserAssignments:
  self.roles->forAll(r1, r2 |
    r1 <> r2 implies r1.users->intersection(r2.users)->isEmpty())

context DSD
inv NoConflictingSessionActivations:
  self.roles->forAll(r1, r2 |
    r1 <> r2 implies r1.sessions->intersection(r2.sessions)->isEmpty())

context SSDPerm
inv NoConflictingPermissionAssignments:
  self.perms->forAll(p1, p2 |
    p1 <> p2 implies p1.roles->intersection(p2.roles)->isEmpty())

context SSDUser
inv NoConflictingUserRoleAssignments:
  self.users->forAll(u1, u2 |
    u1 <> u2 implies u1.roles->intersection(u2.roles)->isEmpty())

context PrerequisiteRole
inv UsersSatisfyPrerequisite:
  self.roles->forAll(r1, r2 |
    r1 <> r2 implies r1.users->includesAll(r2.users))

context PrerequisitePerm
inv RolesSatisfyPrerequisite:
  self.perms->forAll(p1, p2 |
    p1 <> p2 implies p1.roles->includesAll(p2.roles))

context Role
inv BranchManagerSingleUser:
  self.name = 'branchManager' implies self.users->size() <= 1

context Role
inv RespectUserCardinality:
  self.maxUsers = -1 or self.users->size() <= self.maxUsers

context User
inv SessionCardinality:
  self.sessions->size() <= 5

context User
inv RoleCountLimit:
  self.roles->size() <= 3

context User::DeleteSession(s : Session)
pre:  self.sessions->includes(s)
post: self.sessions = self.sessions@pre->excluding(s)

context User::AssignRole(r : Role)
pre:  not self.roles->includes(r)
post: self.roles = self.roles@pre->including(r)

context User::DeassignRole(r : Role)
pre:  self.roles->includes(r)
post: self.roles = self.roles@pre->excluding(r)

context Role::RevokePermission(p : Permission)
pre:  self.permissions->includes(p)
post: self.permissions = self.permissions@pre->excluding(p)

context Session::AddActiveRole(r : Role)
pre:  self.user.roles->includes(r) and not self.activeRoles->includes(r)
post: self.activeRoles = self.activeRoles@pre->including(r)

context Session::DropActiveRole(r : Role)
pre:  self.activeRoles->includes(r)
post: self.activeRoles = self.activeRoles@pre->excluding(r)

context Session::InvokeOperation(obj : Object, op : Operation)
pre:  self.CheckAccess(obj, op)
post: true

context Permission
inv MustHaveObject:   
  self.objects->size() >= 1
inv MustHaveOperation: 
  self.ops->size() >= 1

context Role::AddAscendant(r : Role)
pre: not self.senior->includes(r)
post: self.senior = self.senior@pre->including(r)

context Role::DeleteAscendant(r : Role)
pre: self.senior->includes(r)
post: self.senior = self.senior@pre->excluding(r)

context Role::AddDescendant(r : Role)
pre: not self.junior->includes(r)
post: self.junior = self.junior@pre->including(r)

context Role::DeleteDescendant(r : Role)
pre: self.junior->includes(r)
post: self.junior = self.junior@pre->excluding(r)

context Role::AddSSDRole(r : Role)
pre: not self.SSDRoles()->includes(r)
post: self.ssdConstraint.roles = self.ssdConstraint.roles@pre->including(r)

context Role::DeleteSSDRole(r : Role)
pre: self.SSDRoles()->includes(r)
post: self.ssdConstraint.roles = self.ssdConstraint.roles@pre->excluding(r)

context Role::AddDSDRole(r : Role)
pre: not self.DSDRoles()->includes(r)
post: self.dsdConstraint.roles = self.dsdConstraint.roles@pre->including(r)

context Role::DeleteDSDRole(r : Role)
pre: self.DSDRoles()->includes(r)
post: self.dsdConstraint.roles = self.dsdConstraint.roles@pre->excluding(r)